<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=System.Runtime">

    <ResourceDictionary.MergedDictionaries>
        <!-- Order is important -->
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Default icon button style-->
    <Style TargetType="{x:Type Button}"
           x:Key="TransparentButton">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Transparent button with text -->
    <Style TargetType="{x:Type Button}"
           x:Key="TransparentTextButton"
           BasedOn="{StaticResource TransparentButton}">
        <Setter Property="FontSize"
                Value="12" />
        <Setter Property="Foreground"
                Value="{StaticResource ForegroundGrayBrush}" />
    </Style>

    <!-- Window control button base -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowControlButton"
           BasedOn="{StaticResource TransparentButton}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome"
                Value="True" />
        <Setter Property="Padding"
                Value="6" />
        <Setter Property="Width"
                Value="45" />
        <Setter Property="Height"
                Value="21" />
    </Style>

    <!-- Minimize Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowMinimizeButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="/Resources/Images/Topbar/Minimize.png" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="/Resources/Images/Topbar/MinimizeOver.png" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Maximize Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowMaximizeButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="/Resources/Images/Topbar/Maximize.png" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="/Resources/Images/Topbar/MaximizeOver.png" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Close Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowCloseButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="/Resources/Images/Topbar/Close.png" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="/Resources/Images/Topbar/CloseOver.png" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for toggle button in shelfs title -->
    <Style x:Key="CollapsingToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Height="20"
                            Width="20"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{StaticResource BackgroundWhiteBrush}">
                        <Polygon Points="0,0 8,5, 0,10"
                                 Stroke="Black"
                                 Fill="Black"
                                 RenderTransformOrigin="0.5,0.5"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                                 x:Name="poly">
                            <Polygon.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform x:Name="angle"
                                                     Angle="90" />
                                    <ScaleTransform  ScaleX="1"
                                                     ScaleY="1" />
                                </TransformGroup>
                            </Polygon.RenderTransform>
                        </Polygon>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="poly"
                                                         Storyboard.TargetProperty="RenderTransform.Children[0].(RotateTransform.Angle)"
                                                         From="0"
                                                         To="90"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="poly"
                                                         Storyboard.TargetProperty="RenderTransform.Children[0].(RotateTransform.Angle)"
                                                         From="90"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>