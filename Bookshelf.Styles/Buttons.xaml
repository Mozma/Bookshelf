<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="clr-namespace:Bookshelf.Helpers;assembly=Bookshelf.Helpers">

    <ResourceDictionary.MergedDictionaries>
        <!-- Order is important -->
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Default icon button style-->
    <Style TargetType="{x:Type Button}"
           x:Key="TransparentButton">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        
    </Style>

    <!-- Transparent button with text -->
    <Style TargetType="{x:Type Button}"
           x:Key="TransparentTextButton"
           BasedOn="{StaticResource TransparentButton}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="FontSize"
                Value="12" />
        <Setter Property="Foreground"
                Value="{StaticResource ForegroundGrayBrush}" />
    </Style>

    <!-- Transparent button with text -->
    <Style TargetType="{x:Type Button}"
           x:Key="HyperlinkLikeButton"
           BasedOn="{StaticResource TransparentButton}">
        <Setter Property="FontSize"
                Value="12" />

        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Cursor"
                Value="Hand" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="{StaticResource LightBlackBrush}" />

            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window control button base -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowControlButton"
           BasedOn="{StaticResource TransparentButton}">
        
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome"
                Value="True" />
        <Setter Property="Padding"
                Value="6" />
        <Setter Property="Width"
                Value="45" />
        <Setter Property="Height"
                Value="21" />
        
    </Style>

    <!-- Minimize Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowMinimizeButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource MinimizeIcon}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="{StaticResource MinimizeOverIcon}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Maximize Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowMaximizeButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource MaximizeIcon}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="{StaticResource MaximizeOverIcon}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Close Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="WindowCloseButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource CloseIcon}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="{StaticResource CloseOverIcon}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Close Dialog Button -->
    <Style TargetType="{x:Type Button}"
           x:Key="DialogCloseButton"
           BasedOn="{StaticResource WindowControlButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Image Source="{StaticResource CloseIcon}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Content">
                    <Setter.Value>
                        <Image Source="{StaticResource CloseOverIcon}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for toggle button in shelfs title -->
    <Style x:Key="CollapsingToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            Height="20"
                            Width="20"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{StaticResource BackgroundWhiteBrush}"
                            CornerRadius="5">
                            
                        <Polygon Points="0,0 8,5, 0,10"
                                 Stroke="Black"
                                 Fill="Black"
                                 RenderTransformOrigin="0.5,0.5"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                                 x:Name="poly">
                            <Polygon.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform x:Name="angle"
                                                     Angle="90" />
                                    <ScaleTransform  ScaleX="1"
                                                     ScaleY="1" />
                                </TransformGroup>
                            </Polygon.RenderTransform>
                        </Polygon>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="poly"
                                                         Storyboard.TargetProperty="RenderTransform.Children[0].(RotateTransform.Angle)"
                                                         To="90"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="poly"
                                                         Storyboard.TargetProperty="RenderTransform.Children[0].(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button with rounded corner-->
    <Style x:Key="RoundCornerButton"
           TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="MinHeight"
                Value="30" />
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                                MinHeight="30"
                                MinWidth="20"
                                UseLayoutRounding="True"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"
                                Background="{StaticResource BackgroundSilverBrush}"
                                CornerRadius="10">

                            <Border.Effect>
                                <DropShadowEffect Opacity="0.4"
                                                  BlurRadius="2"
                                                  ShadowDepth="1"
                                                  Direction="315" />
                            </Border.Effect>

                            <TextBlock FontSize="13"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="15,0,15,0"
                                       Foreground="{StaticResource ForegroundDarkGrayBrush}">
                                
                                <ContentPresenter />

                            </TextBlock>
                        </Border>
                        <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource SilverPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Status Button-->
    <Style x:Key="StatusButton"
           TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels"
                    Value="True" />
            <Setter Property="BorderThickness"
                    Value="0" />
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Cursor"
                    Value="Hand" />
            <Setter Property="MinHeight"
                    Value="30" />
            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                MinHeight="30"
                                MinWidth="20"
                                UseLayoutRounding="True"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"
                                Background="{StaticResource BackgroundSilverBrush}"
                                CornerRadius="15">

                            <Border.Effect>
                                <DropShadowEffect Opacity="0.4"
                                                  BlurRadius="2"
                                                  ShadowDepth="2"
                                                  Direction="315" />
                            </Border.Effect>

                            <ContentPresenter x:Name="content"
                                              TextBlock.FontSize="16"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="15,0,15,0" />

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed"
                                     Value="True">
                                <Setter TargetName="border"
                                        Property="Opacity"
                                        Value="0.6" />
                            </Trigger>

                            <DataTrigger Binding="{Binding Status}"
                                         Value="{x:Static my:BookStatus.WithoutStatus}">
                                <Setter  TargetName="border"
                                         Property="Background"
                                     Value="{StaticResource StatusWithoutStatusBrush}" />

                                <Setter TargetName="content"
                                        Property="Content"
                                        Value="Без статуса" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}"
                                         Value="{x:Static my:BookStatus.NowReading}">
                                <Setter TargetName="border"
                                        Property="Background"
                                    Value="{StaticResource StatusNowReadingBrush}" />
                                <Setter TargetName="content"
                                        Property="Content"
                                        Value="Читаю" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}"
                                         Value="{x:Static my:BookStatus.Finished}">
                                <Setter TargetName="border"
                                        Property="Background"
                                    Value="{StaticResource StatusFinishedBrush}" />
                                <Setter TargetName="content"
                                        Property="Content"
                                        Value="Прочёл" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Status}"
                                         Value="{x:Static my:BookStatus.WantToRead}">
                                <Setter TargetName="border"
                                        Property="Background"
                                    Value="{StaticResource StatusWantToReadBrush}" />
                                <Setter TargetName="content"
                                        Property="Content"
                                        Value="Хочу прочитать" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Status}"
                                         Value="{x:Static my:BookStatus.QuitReading}">
                                <Setter TargetName="border"
                                        Property="Background"
                                    Value="{StaticResource StatusQuitReadingBrush}" />
                                <Setter TargetName="content"
                                        Property="Content"
                                        Value="Бросил читать" />
                            </DataTrigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    <!-- Button with rounded with background corner-->
    <Style x:Key="RoundCornerCoverButton"
           TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="10">

                        <TextBlock FontSize="13"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Margin="15,0,15,0"
                                   Foreground="{StaticResource ForegroundDarkGrayBrush}">
                                
                                <ContentPresenter />

                        </TextBlock>

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Opacity"
                                    Value="0.8">
                            </Setter>

                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Gray Button with rounded corner-->
    <Style x:Key="GrayRoundCornerButton"
           TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="MinHeight"
                Value="30" />
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            MinHeight="30"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{StaticResource DefaultGrayBrush}"
                            CornerRadius="10">

                        <Border.Effect>
                            <DropShadowEffect Opacity="0.4"
                                              BlurRadius="2"
                                              ShadowDepth="1"
                                              Direction="315" />
                        </Border.Effect>

                        <TextBlock FontSize="16"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Margin="15,0,15,0"
                                   Foreground="{StaticResource ForegroundBlackBrush}">
                                
                                <ContentPresenter />

                        </TextBlock>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{StaticResource BackgroundDarkGrayBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>